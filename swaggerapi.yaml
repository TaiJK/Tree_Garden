openapi: 3.0.0

info: 
  title: The TreeGarden Project
  description: This is the document of TreeGarden Function
  version : 1.0.0
  contact: 
    email: tranductai@gspit.net
  liscence: 
    name: TreeGarden 1.0
    url : "http://TreeGarden.org/"
  server: [localhost:3000/]

components:
  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT  
  schemas:
    Plants:
      type: object
      properties: 
        namePlant:
          type: string 
        kind:
          type: object
        quantity: 
          type: number
        price:
          type: number
        image: 
          type: string
        discount:
          type: number

    Kinds :
      type: object
      properties:
        nameKind:
          type: string 
        size: 
          type: string
        tempt:
          type: string
        hight: 
          type: number
        often:
          type: string 
        list:
          type : string
    User:
      type: object
      properties:
        nameUser:
          type: string
        Phone:
          type: number
        password:
          type : string
        role:
          type: string
        history:
          type: array
    login:
      type: object
      properties:
        nameUser:
          type: string
        password:
          type: string
    Cart:
      type: object 
      properties:
        plantid: 
          type: string
        quantity:
          type: number  # optional, arbitrary value for documentation purposes
# 2) Apply the security globally to all operations
security:
  - bearerAuth: []  





paths:
#get all plants
  /user/all:
    get:
      tags:
        - User  
      summary: these are user
      description: these are all the user account we have in system
      parameters:
      - $ref: "#/parameters/page"
      - $ref: "#/parameters/limit"
      responses:  
        200:
          description : success
  /user/register:
    post:
      tags:
        - User
      summary: Register User
      description: Create a user in database 
      requestBody:
        required: true 
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/login'
      responses:
        200:
          description: Register success!
  


  /user/login:
    post:
      tags:
      - User
      summary: login check
      description: checkin from client
      securityschema:
      - $ref: '#/components/securityschema'
      requestBody:
        required: true
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/login'
      responses:
        200:
          description: success
  /user/{id}:
    put:
      tags:
        - User
      summary: changes user informations
      description: these are all informations we changes by id 
      parameters:
        - name : id
          in: path
          required : true 
          schema:
            type: string 
      requestBody:
        required: true 
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        200:
          description: update success
          schema: 
            $ref: '#/components/schemas/User'
    delete:
      tags:
        - User
      summary: Delete user
      description: This can only be done once
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          description: The id that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        200:
          description: success!
          schema: 
            $ref: '#/components/schemas/User'
  /plants:
    get:
      
      tags:
        - Plants
      summary: these are plants
      description: these are all the plant we have 
      parameters:
      - $ref: "#/parameters/page"
      - $ref: "#/parameters/limit"
      responses: 
        200:
          description : success
# #get plant by page and limit query
#   /plants/?:
#     get:
#       tags:
#         - plants
#       summary: get plant by query
#       description: enter page number or/and limit
#       parameters:
#         required: true
#         content:
#           - page: page
#             in: path
#             schema: 
#               type: number
#           - limit: limit
#             in: path
#             schema:
#               type: number
#       responses:
#         200:
#           description : success


#get all kinds
  /kinds:
    get:
      tags:
        - Kinds
      summary: these are kinds
      description: these are all the kinds we have 
      responses: 
        200:
          description : success
  /kinds/{id}:
    get:
      tags:
        - Kinds
      summary: get kinds by id kinds
      description: these are all kinds we find by id 
      parameters:
        - name : id
          in: path
          required : true 
          schema:
            type: string 
      responses:
        200:
          description: find success
          schema: 
            $ref: '#/components/schemas/Kinds'
    delete:
      tags:
        - Kinds
      summary: delete kinds by id kinds
      description: these are all kinds we delete by id 
      parameters:
        - name : id
          in: path
          required : true 
          schema:
            type: string 
      responses:
        200:
          description: delete success
          schema: 
            $ref: '#/components/schemas/Kinds'
    put:
      tags:
        - Kinds
      summary: changes kinds by id kinds
      description: these are all kinds we changes by id 
      parameters:
        - name : id
          in: path
          required : true 
          schema:
            type: string 
      requestBody:
        required: true 
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/Kinds'
      responses:
        200:
          description: delete success
          schema: 
            $ref: '#/components/schemas/Kinds'
  /kinds/post:
    post:
      tags:
        - Kinds
      summary : post the kinds
      produces:
        - applcation/json
      requestBody:
        required: true 
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/Kinds'
      responses:
          200:
            description: post plant success!
            schema: 
              $ref: '#/components/schemas/Kinds'
  
  # /kinds/sort:

#post data
  /plants/:
    post:
      tags:
        - Plants
      summary: post the plant
      produces:
        - applcation/json
      requestBody:
        required: true 
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/Plants'
      responses:
          200:
            description: post plant success!
            schema: 
            type: object
            properties: 
              $ref: '#/components/schemas/Plants'


                
#get plant by id
  /plants/{id}:
    get:
      tags:
        - Plants
      summary: plant by id
      description: find  a plant by id
      parameters:
        - name : id
          in: path
          required : true 
          schema:
            type: string 
      responses: 
        200:
          description: success 
          schema: 
            type: object
            properties: 
              $ref: '#/components/schemas/Plants'

    put:
      tags:
        - Plants
      summary: plant by id
      parameters:
        - name : id
          in: path
          required : true 
          schema:
            type: string  
      requestBody:
        required: true 
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/Plants'
      responses:  
        200:
          description: success 
          schema: 
            type: object
            properties: 
              $ref: '#/components/schemas/Plants'
    delete:
      tags:
        - Plants
      summary: Delete plant
      description: This can only be done once
      operationId: deletePlant
      parameters:
        - name: id
          in: path
          description: The id that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        200:
          description: success!


  /cart/addcart:
    put:
      tags: 
        - Cart
      summary: add to cart 
      description: add a plants to a cart with id user follow
      requestBody:
        required: true 
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/Cart'
      responses:
        200:
          description: success!
          schema: 
            $ref: '#/components/schemas/Cart'
  /cart/updatecart:
    put:
      tags:
        - Cart
      summary: cart by id
      description: update cart with id cart and informations follow
      requestBody:
        required: true 
        content: 
          application/json:
            schema:
              $ref: '#/components/schemas/Cart'  
      responses:
        200:
          description: this is the present cart by your id 
          schema: 
            $ref: '#/components/schemas/Cart'
    delete: 
      tags: 
        - Cart
      summary: delete item in cart
      requestBody:
        required : true 
      content: 
        application/json:
          chema:
            $ref: '#/components/schemas/Cart'
      responses:
        200: 
          description: update success
          schema: 
            $ref: '$components/schemas/Cart'


    

  
definitions:
 PaginationResponse:
    type: object
    properties:
      totalrecords:
        type: number
      displayrecords:
         type: number
    xml:
       name: PaginationResponsedata


parameters:
    limit:
      name: limit
      in: query
      description: Number of records to return
      type: number
    page:
      name: page
      in: query
      description: Start index for paging
      type: number
